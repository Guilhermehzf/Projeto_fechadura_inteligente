name: Enviar API para o Servidor (preservar .env e bin)

on:
  push:
    branches:
      - US-MQTT
    paths:
      - "api/**"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Instalar rsync e sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync sshpass

      - name: Definir variáveis
        id: vars
        run: |
          echo "PORT=${{ secrets.SERVER_PORT || 22 }}" >> $GITHUB_OUTPUT

      # garante pasta e faz backup de .env e bin/app se existirem
      - name: Preparar destino e backups (.env e bin/app)
        env:
          SSH_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SSH_USER: ${{ secrets.SERVER_USER }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}
          REMOTE_PATH: ${{ secrets.SERVER_APP_PATH }}
        run: |
          PORT="${{ steps.vars.outputs.PORT }}"
          sshpass -p "$SSH_PASSWORD" ssh -p "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "
            set -e
            mkdir -p '$REMOTE_PATH'
            # backup .env
            if [ -f '$REMOTE_PATH/.env' ]; then
              cp -f '$REMOTE_PATH/.env' '$REMOTE_PATH/.env.bak'
            fi
            # backup bin/app (se existir)
            if [ -f '$REMOTE_PATH/bin/app' ]; then
              mkdir -p '$REMOTE_PATH/bin'
              cp -f '$REMOTE_PATH/bin/app' '$REMOTE_PATH/bin/app.bak'
            fi
          "

      # exclusões que não devem ser tocadas no servidor
      - name: Criar arquivo de exclusões
        run: |
          cat > rsync-excludes.txt <<'EOF'
          .env
          .env.*
          bin/
          uploads/
          storage/
          # adicione outros caminhos que só existam no servidor
          EOF

      # sincroniza o CONTEÚDO de ./api preservando .env e bin/
      - name: Sincronizar pasta api para o servidor (preserva .env e bin)
        env:
          SSH_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SSH_USER: ${{ secrets.SERVER_USER }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}
          REMOTE_PATH: ${{ secrets.SERVER_APP_PATH }}
        run: |
          PORT="${{ steps.vars.outputs.PORT }}"
          sshpass -p "$SSH_PASSWORD" rsync -az --delete \
            --exclude-from=rsync-excludes.txt \
            -e "ssh -o StrictHostKeyChecking=no -p $PORT" \
            ./api/ "$SSH_USER@$SSH_HOST:$REMOTE_PATH/"

      - name: Verificar no servidor (opcional)
        if: always()
        env:
          SSH_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SSH_USER: ${{ secrets.SERVER_USER }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}
          REMOTE_PATH: ${{ secrets.SERVER_APP_PATH }}
        run: |
          PORT="${{ steps.vars.outputs.PORT }}"
          sshpass -p "$SSH_PASSWORD" ssh -p "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "
            echo 'Conteúdo do destino:'
            ls -la '$REMOTE_PATH' | head -n 50
            [ -f '$REMOTE_PATH/.env' ] && echo '.env preservado' || echo 'ATENÇÃO: .env ausente'
            [ -d '$REMOTE_PATH/bin' ] && ls -la '$REMOTE_PATH/bin' || true
          "
