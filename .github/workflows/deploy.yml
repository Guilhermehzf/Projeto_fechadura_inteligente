name: Enviar API para o Servidor (preservar .env/bin e reiniciar)

on:
  push:
    branches: [ US-MQTT ]
    paths: [ "api/**" ]

concurrency:
  group: deploy-api
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Instalar rsync e sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync sshpass

      - name: Definir variáveis
        id: vars
        run: |
          echo "PORT=${{ secrets.SERVER_PORT || 22 }}" >> $GITHUB_OUTPUT

      - name: Preparar destino e backups (.env e smartlock)
        env:
          SSH_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SSH_USER: ${{ secrets.SERVER_USER }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}
          REMOTE_PATH: ${{ secrets.SERVER_APP_PATH }}
        run: |
          PORT="${{ steps.vars.outputs.PORT }}"
          sshpass -p "$SSH_PASSWORD" ssh -p "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "
            set -e
            mkdir -p '$REMOTE_PATH'
            if [ -f '$REMOTE_PATH/.env' ]; then cp -f '$REMOTE_PATH/.env' '$REMOTE_PATH/.env.bak'; fi
            if [ -f '$REMOTE_PATH/smartlock' ]; then cp -f '$REMOTE_PATH/smartlock' '$REMOTE_PATH/smartlock.bak'; fi
          "

      - name: Criar arquivo de exclusões
        run: |
          cat > rsync-excludes.txt <<'EOF'
          .env
          .env.*
          bin/
          uploads/
          storage/
          EOF

      - name: Sincronizar pasta api para o servidor (preserva .env/bin)
        env:
          SSH_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SSH_USER: ${{ secrets.SERVER_USER }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}
          REMOTE_PATH: ${{ secrets.SERVER_APP_PATH }}
        run: |
          PORT="${{ steps.vars.outputs.PORT }}"
          sshpass -p "$SSH_PASSWORD" rsync -az --delete \
            --exclude-from=rsync-excludes.txt \
            -e "ssh -o StrictHostKeyChecking=no -p $PORT" \
            ./api/ "$SSH_USER@$SSH_HOST:$REMOTE_PATH/"

      - name: Build remoto e restart serviço
        env:
          SSH_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SSH_USER: ${{ secrets.SERVER_USER }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}
          REMOTE_PATH: ${{ secrets.SERVER_APP_PATH }}
        run: |
          PORT="${{ steps.vars.outputs.PORT }}"
          sshpass -p "$SSH_PASSWORD" ssh -p "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" '
            set -euo pipefail
            cd "'"$REMOTE_PATH"'"

            if [ -x /snap/bin/go ]; then
              export PATH="/snap/bin:$PATH"
              GO_BIN="/snap/bin/go"
            else
              GO_BIN="$(command -v go || true)"
            fi
            if [ -z "$GO_BIN" ]; then echo "Go não encontrado no PATH do servidor"; exit 1; fi

            # normaliza versão go.mod (major.minor)
            if [ -f go.mod ]; then
              if grep -qE "^go [0-9]+\.[0-9]+\.[0-9]+" go.mod; then
                sed -i -E "s/^go ([0-9]+\.[0-9]+)\.[0-9]+/go \1/" go.mod
              fi
            fi

            "$GO_BIN" mod tidy

            # gera smartlock direto na raiz do projeto
            CGO_ENABLED=0 "$GO_BIN" build -trimpath -ldflags="-s -w" -o smartlock ./cmd/server

            chmod +x smartlock

            sudo -n systemctl restart api-tranca.service || systemctl --user restart api-tranca.service
          '

      - name: Verificar status (logs e health)
        if: always()
        env:
          SSH_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SSH_USER: ${{ secrets.SERVER_USER }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}
          REMOTE_PATH: ${{ secrets.SERVER_APP_PATH }}
        run: |
          PORT="${{ steps.vars.outputs.PORT }}"
          sshpass -p "$SSH_PASSWORD" ssh -p "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" '
            systemctl is-active api-tranca.service && echo "api-tranca.service ativo" || echo "api-tranca.service inativo ou indisponível"
            # tenta healthz se existir
            (curl -fsS http://127.0.0.1:8088/healthz && echo "healthz ok") || true
            journalctl -u api-tranca.service -n 80 --no-pager || true
          '
